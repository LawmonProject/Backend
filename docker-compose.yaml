version: '3.8'
services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: ${DB_URL}
      SPRING_DATASOURCE_USERNAME: ${DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_DATA_MONGODB_URI: ${MONGO_URI}
      SPRING_DATA_MONGODB_USERNAME: ${MONGO_USERNAME}
      SPRING_DATA_MONGODB_PASSWORD: ${MONGO_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - app-network

  mysql:
    container_name: mysql
    image: mysql:latest
    env_file:
      - .env
    ports:
      - "3306:3306"
    volumes:
      - db_mysql:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # init.sql 파일 매핑
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -u ${DB_USERNAME} --password=${DB_PASSWORD} || exit 1" ]
      interval: 5s
      retries: 10
      start_period: 30s
      timeout: 5s
    networks:
      - app-network

  redis:
    container_name: redis
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - db_redis:/data
    #      - ./redis/conf/redis.conf:/usr/local/conf/redis.conf
    #    labels:
    #      - "name=redis"
    #      - "mode=standalone"
    restart: always
    #    command: redis-server /usr/local/conf/redis.conf
    networks:
      - app-network

#  mongo:
#    container_name: mongo
#    image: mongo:latest
#    ports:
#      - "27017:27017"
#    volumes:
#      - db_mongo:/data/db
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: lawmon
#      MONGO_INITDB_ROOT_PASSWORD: qwer
#    restart: always
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8081:8080"  # Grafana에서 이 포트를 Prometheus가 스크랩함
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml  # Prometheus 설정 파일
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - app-network


volumes:
  db_mysql:
  db_redis:
  grafana-storage:
#  db_mongo:


networks:
  app-network:
    driver: bridge