name: Java CI with Gradle

# 동작 조건 설정 : main 브랜치에 push 혹은 pull request가 발생할 경우 동작한다.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    # 1. Java 21 세팅
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'

    # 2. Spring Boot 애플리케이션 빌드
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      uses: gradle/gradle-build-action@v3
      with:
        arguments: clean bootJar


    # 3. Docker 이미지 빌드
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/backend-lawmon-backend .

    # 4. DockerHub 로그인
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # 5. Docker Hub 이미지 푸시
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend-lawmon-backend

  # 위 과정에서 푸시한 이미지를 ec2에서 풀받아서 실행시키는 과정
  run-docker-image-on-ec2:
    # build-docker-image (위)과정이 완료되어야 실행됩니다.
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      # 1. 최신 이미지를 풀받습니다
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/backend-lawmon-backend

      # 2. 기존의 컨테이너를 중지시킵니다
      - name: docker stop container
        run: sudo docker ps -q | xargs -r sudo docker stop

      # 모든 컨테이너 삭제
      - name: remove all container
        run: sudo docker ps -aq | xargs -r sudo docker rm -f

      # app-network 가 없으면 생성
      - name: Ensure Docker Network Exists
        run: sudo docker network inspect app-network >/dev/null 2>&1 || sudo docker network create app-network

      # 볼륨 생성
      - name: Create Docker volumes if not exist
        run: |
          docker volume create lawmon-mysql || true
          docker volume create lawmon-redis || true
          
      # Mysql 컨테이너 실행
      - name: mysql run new container
        run: |
          sudo docker run -d --name mysql --network app-network \
            -e MYSQL_ROOT_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }} \
            -e MYSQL_DATABASE=lawmon ${{ secrets.MYSQL_DATABASE }}\
            -v lawmon-mysql:/var/lib/mysql \
            -p 3306:3306 mysql:latest

      # Redis 컨테이너 실행
      - name: Redis run new container
        run: |
          sudo docker run -d --name redis --network app-network \
            -v lawmon-redis:/data \
            -p 6379:6379 redis:latest

      # 3. 최신 이미지를 컨테이너화하여 실행시킵니다
      - name: docker run new container
        run: |
          sudo docker run --network app-network --name backend-lawmon-backend --rm -d -p 8080:8080 \
          -e GPT_API_KEY=${{ secrets.GPT_API_KEY }} \
          -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
          -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
          -e AWS_REGION=${{ secrets.AWS_REGION }} \
          -e AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }} \
          -e SPRING_PROFILES_ACTIVE=prod \
          -e SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }} \
          -e SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }} \
          -e SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }} \
          -e SPRING_DATA_MONGODB_URI=${{ secrets.SPRING_DATA_MONGODB_URI }} \
          -e SPRING_DATA_MONGODB_USERNAME=${{ secrets.SPRING_DATA_MONGODB_USERNAME }} \
          -e SPRING_DATA_MONGODB_PASSWORD=${{ secrets.SPRING_DATA_MONGODB_PASSWORD }} \
          -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
          -e JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }} \
          ${{ secrets.DOCKERHUB_USERNAME }}/backend-lawmon-backend

      # 4. 미사용 이미지를 정리합니다
      - name: delete old docker image
        run: sudo docker system prune -af
